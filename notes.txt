# Project Headache

A purely symbolic, no keywords, lisp like language.

All commands start and end in parens. It follows the pattern (operator (operand)+). Operator is a statement, operand is an expression.

(!! Symbol *(command)+) Defines a symbol and inits it with value 0. If there's a command, this defines a function that calls the command. Also assigns value.

(^^ ((arg)*) ((command)*)) Lambda, returns a function object.

(+ Symbol) Binary increments the value in the symbol. If it's a function, throws an error. Stacks endlessly to increment a lot in just 1 command.

(- Symbol) Binary decrements. Decrementing from 0 will loop back to highest possible number. Stacks same as above.

(Symbol symbol) Assigns the value of symbol to symbol, or if it's a function, will assign the return value of the function. If there's no return value, it throws error.

(>? Symbol symbol2 (command)+) Will compare symbol with symbol2, if symbol is greater than symbol2.

(<? Symbol symbol2 (command)+) Same as above but for less than.

(=? Symbol symbol2 (command)+) Same as above but will check if equals.

(// Symbol symbol2) Divides symbol by symbol2. Throws error if one is function.

(** Symbol symbol2) Same as above but for multiplication.

(<< *(Symbol)) Returns a function. Using this outside a function will exit the program prematurely. Returns an optional symbol.

(%% Symbol) Asks for a single character input and stores it as a hex value inside symbol.

(@@ Symbol) Writes the binary value of Symbol into output as an ascii character.

## OPTIONAL

(!! Symbol []) Defines a symbol that contains a dynamic array. Symbol will return the value of the first value in array, which is 0 upon definition.

(+ Array) Moves the array pointer to the right by one. Stacks. Arrays have a max value of 255.

(- Array) Same as above but moves left. Loops back to pointing to 255 if going below 0.

(Array Symbol) Stores the value inside symbol into Array. If function, will store the return value.

## Data Types
  - uint8
  - function
  - uint8 array[256]

### Symbol Struct
  - Union uint8, uint8 array[256], array of pointers

### Op Struct
  - String Op
  - int OpNum
  - array of Op Struct

## Expressions
  - Symbol - evaluates to the value inside, if it's a function will return return value if it's array will return the value at head
  - Function -

## Code Structure
  - Scanner: make tokens, like with Statement Lang

## Grammar

operation = "(" operator (operand)*)
operator = "!!" / "@@" / ("+")* / ("-")* / ">?" / "<?" / "=?" / "//" / "**" / "%%" / "<<" / "^^" / symbol
operand = symbol / operation
symbol = uint8 / function / uint8 array[256]